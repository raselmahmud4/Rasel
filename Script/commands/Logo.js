module.exports.config = {
  name: "logo",
  version: "3.0.0",
  hasPermssion: 0,
  credits: "Rasel Mahmud",
  description: "AI ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶≤‡ßã‡¶ó‡ßã ‡¶§‡ßà‡¶∞‡¶ø",
  commandCategory: "tools",
  usages: "[‡¶¨‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶° ‡¶®‡¶æ‡¶Æ]",
  cooldowns: 5,
};

module.exports.run = async function ({ api, event, args }) {
  const axios = require("axios");
  const fs = require("fs-extra");
  const request = require("request");

  const brandName = args.join(" ");
  if (!brandName) {
    return api.sendMessage("üî§ ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶° ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®!\n‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: /logo Apple", event.threadID);
  }

  const waiting = await api.sendMessage(`üé® ‚Äú${brandName}‚Äù ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≤‡ßã‡¶ó‡ßã ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶ö‡ßç‡¶õ‡ßá, ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®...`, event.threadID);

  try {
    const prompt = encodeURIComponent(`${brandName} logo, minimal, vector, modern, clean white background`);
    const res = await axios.get(`https://lexica.art/api/v1/search?q=${prompt}`);
    const images = res.data.images?.slice(0, 5); // ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡ß´‡¶ü‡¶æ ‡¶≤‡ßã‡¶ó‡ßã

    if (!images || images.length === 0) {
      return api.sendMessage("üòì ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶ï‡ßã‡¶®‡ßã ‡¶≤‡ßã‡¶ó‡ßã ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø!", event.threadID);
    }

    const files = [];

    for (let i = 0; i < images.length; i++) {
      const url = images[i].src;
      const filePath = __dirname + `/cache/${brandName}_logo_${i}.png`;

      await new Promise((resolve) => {
        request(url)
          .pipe(fs.createWriteStream(filePath))
          .on("close", () => {
            files.push(fs.createReadStream(filePath));
            resolve();
          });
      });
    }

    api.sendMessage(
      {
        body: `‚úÖ ‚Äú${brandName}‚Äù ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ${files.length} ‡¶ü‡¶ø ‡¶≤‡ßã‡¶ó‡ßã ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá:\nüñºÔ∏è ‡¶®‡¶ø‡¶ö‡ßá ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶® üëá`,
        attachment: files,
      },
      event.threadID,
      () => {
        api.unsendMessage(waiting.messageID);
        files.forEach((f) => fs.unlinkSync(f.path));
      }
    );
  } catch (e) {
    console.error(e);
    api.sendMessage("‚ùå ‡¶≤‡ßã‡¶ó‡ßã ‡¶§‡ßà‡¶∞‡¶ø‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®!", event.threadID);
  }
};
